name: Lint and test

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  Setup_software_basis_py310_latest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@master
        with:
          persist-credentials: false
          submodules: recursive

      - name: Setup python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies ☕️
        id: cache-software-basis
        uses: actions/cache@v3
        env:
          cache-name: cache-software-basis
        with:
          path: |
            /home/runner/work/columnflow/columnflow/data/software/venvs
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/requirements_prod.txt', '**/requirements_prod.txt', '**/sandboxes/cf_*.sh') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install basic software stack
        if: ${{ steps.cache-software-basis.outputs.cache-hit != 'true' }}
        continue-on-error: true
        run: |
          source setup.sh ""
          echo "github_workdir" ${{ GITHUB_WORKSPACE }}
  
  lint:
    runs-on: ubuntu-latest
    needs: Setup_software_basis_py310_latest
    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@master
        with:
          persist-credentials: false
          submodules: recursive

    #   - name: Setup python 🐍
    #     uses: actions/setup-python@v4
    #     with:
    #       python-version: "3.10"

    #   - name: Install dependencies ☕️
    #     run: |
    #       source setup.sh ""
    # steps:
      - name: Lint 🔍
        run: |
          source setup.sh ""
          ./tests/run_linting

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@master
        with:
          persist-credentials: false
          submodules: recursive

      - name: Setup python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies ☕️
        run: |
          source setup.sh ""

      - name: Test 🎢
        run: |
          source setup.sh ""
          ./tests/run_tests

  pypi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@master
        with:
          persist-credentials: false
          submodules: recursive

      - name: Setup python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies ☕️
        run: |
          pip install -U pip
          pip install twine

      - name: Check bundling 📦
        run: python setup.py sdist

      - name: Check setup 🚦
        run: twine check "dist/$( python setup.py --fullname ).tar.gz"

  coverage:
    runs-on: ubuntu-latest
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@master
        with:
          persist-credentials: false
          submodules: recursive

      - name: Setup python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies ☕️
        run: |
          source setup.sh ""

      - name: Run coverage test 🎢
        run: |
          source setup.sh ""
          ./tests/run_coverage
          ls -al

      - name: Upload report 🔝
        uses: codecov/codecov-action@v2
        with:
          flags: unittests
          files: coverage_test_util.xml,coverage_test_columnar_util.xml
          verbose: true
